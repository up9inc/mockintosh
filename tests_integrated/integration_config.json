{
  "globals": {
    "headers": {
      "global-hdr1": "globalval1",
      "global-hdr2": "globalval2"
    }
  },
  "services": [
    {
      "comment": "First basic service",
      "port": 8001,
      "endpoints": [
        {
          "path": "/",
          "method": "GET",
          "response": "static response"
        },
        {
          "path": "/parameterized1/{{intoVar}}/subval",
          "response": "intoVar capture: {{intoVar}}"
        },
        {
          "path": "/parameterized1/staticVal/subval",
          "response": "static path components have priority"
        },
        {
          "path": "/parameterized2/{{regEx 'prefix-.+'}}/subval",
          "response": "regex capture: {{request.path}}"
        },
        {
          "path": "/parameterized1/{{regEx 'prefix2-([^/]+)' 'varname'}}/subval2",
          "response": "tricky regex capture: {{varname}}"
        },
        {
          "path": "/qstr-matching1",
          "queryString": {
            "param1": "constant val",
            "param2": "{{anyValIntoVar}}",
            "param3": "{{regEx 'prefix-(.+)-suffix' 'capturedVar'}}"
          },
          "response": {
            "body": "qstr match 1: {{request.queryString.param1}} {{capturedVar}} {{anyValIntoVar}}",
            "status": "202",
            "headers": {
              "Content-Type": "application/x-my-own",
              "param2": "{{request.queryString.param2}} {{request.queryString.param3}}",
              "global-hdr1": "overridden"
            }
          }
        },
        {
          "path": "/header-matching1",
          "headers": {
            "hdr1": "constant val",
            "hdr2": "{{anyValIntoVar}}",
            "hdr3": "{{regEx 'prefix-(.+)-suffix' 'capturedVar'}}"
          },
          "response": {
            "body": "headers match 1: {{request.headers.hdr1}} {{capturedVar}}",
            "status": 201,
            "headers": {
              "Set-Cookie": [
                "name1={{request.headers.hdr2}}",
                "name2={{request.headers.hdr3}}"
              ]
            }
          }
        },
        {
          "path": "/header-matching1",
          "headers": {
            "hdr4": "another header"
          },
          "response": "alternative header"
        },
        {
          "path": "/body-jsonschema1",
          "method": "POST",
          "body": {
            "schema": {
              "type": "object",
              "properties": {
                "somekey": {}
              },
              "required": [
                "somekey"
              ]
            }
          },
          "response": "body json schema matched"
        },
        {
          "path": "/status-template1",
          "response": {
            "status": "{{request.queryString.rc}}"
          }
        },
        {
          "path": "/insecure-configuration1",
          "response": "@/etc/hosts"
        },
        {
          "path": "/insecure-configuration2",
          "response": "@../../etc/hosts"
        },
        {
          "path": "/cors-request",
          "method": "post",
          "body": {
            "schema": "@empty_schema.json"
          },
          "response": {
            "status": 201
          }
        },
        {
          "path": "/cors-request-overridden",
          "method": "options",
          "response": {
            "status": 401
          }
        }
      ]
    },
    {
      "comment": "Service with specified.host",
      "port": 8002,
      "hostname": "specified.host",
      "endpoints": [
        {
          "id": "some-endpoint-id",
          "path": "/",
          "method": "get",
          "response": {}
        }
      ]
    },
    {
      "comment": "Service with no endpoints, for bare interceptors",
      "port": 8003
    },
    {
      "comment": "Service for CORS",
      "port": 8004,
      "endpoints": [
        {
          "path": "/cors2",
          "response": "@tests_integrated/cors.html"
        }
      ]
    }
  ]
}
