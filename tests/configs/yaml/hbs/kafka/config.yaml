---
templatingEngine: Handlebars
management:
  port: 8000
  ssl: true
  sslCertFile: cert.pem
  sslKeyFile: key.pem
globals:
  headers:
    global-hdr1: globalval1
    global-hdr2: globalval2
services:
- name: Kafka Mocks
  type: kafka
  address: "{{env 'KAFKA_ADDR' 'localhost:9092'}}"
  actors:
  - produce:
      queue: topic1
      key: key1
      value: value1
      headers:
        hdr1: val1
  - consume:
      queue: topic2
      key: key2
      schema:
        type: object
        properties:
          somekey: {}
        required:
        - somekey
      headers:
        hdr2: val2
  - produce:
      create: true
      queue: topic3
      key: key3
      value: value3
      headers:
        hdr3: val3
    delay: 5
    limit: 100
  - consume:
      queue: topic3
      key: "{{var3_1}}"
      value: "{{var3_2}}"
      headers:
        hdr3: "{{var3_3}}"
  - consume:
      queue: topic4
      key: key4
      schema: "@value_schema.json"
      headers:
        hdr4: val4
    delay: 3
    produce:
      queue: topic5
      key: key5
      value: "value5 and {{consumed.key}} {{consumed.value}} {{consumed.headers.hdr4}}"
      headers:
        hdr5: val5
  - name: actor6
    produce:
      queue: topic6
      value: value6
  - name: limitless
    produce:
      queue: topic7
      key: key7
      value: value7
      headers:
        hdr7: val7
    delay: 20
  - name: short-loop
    produce:
      queue: topic8
      key: key8
      value: value8
      headers:
        hdr8: val8
    delay: 2
    limit: 2
  - name: actor9
    consume:
      queue: topic9
      key: key9
      value: value9
      headers:
        hdr9: val9
  - name: templated-producer
    produce:
      queue: templated-producer
      key: prefix-{{random.uuid4}}
      value: "{{fake.name}}"
      headers:
        name: templated
        constant: constant-value
        timestamp: "{{date.timestamp}}"
        counter: "{{counter 'kafkaCounter'}}"
        fromFile: "@templates/example.txt"
  - consume:
      queue: topic10
  - name: capture-limit
    consume:
      capture: 2
      queue: topic11
  - name: Binary Producer
    produce:
      queue: binary-topic
      value: "@image.png"
  - consume:
      queue: topic2
      key: keyX
      value: valueX
      headers:
        hdr2: valX
  - consume:
      queue: topic2
      key: key2
      schema: "@value_schema_error.json"
      headers:
        hdr2: val2
  - name: chain1-on-demand
    produce:
      queue: chain1-step1
      key: "123456-key"
      value: "123456-val"
      headers:
        hdr: "123456-hdr"
  - name: chain1-reactive
    consume:
      queue: chain1-step1
      key: "{{regEx '.*' 'captured_key'}}"
      value: "{{regEx '.*' 'captured_val'}}"
      headers:
        hdr: "{{regEx '.*' 'captured_hdr'}}"
    produce:
      queue: chain1-step2
      value: "{{consumed.value}}"
      headers:
        captured-key: '{{captured_key}}'
        captured-val: '{{captured_val}}'
        captured-hdr: '{{captured_hdr}}'
  - name: chain1-validating
    consume:
      queue: chain1-step2
      headers:
        captured-key: "{{regEx '.*'}}"
        captured-val: "{{regEx '.*'}}"
        captured-hdr: "{{regEx '.*'}}"
  - name: multiproducer
    produce:
      - queue: topic12
        key: key12-1
        value: value12-1
        headers:
          hdr12-1: val12-1
      - queue: topic12
        tag: async-tag12-3
        key: key12-3
        value: value12-3
        headers:
          hdr12-3: val12-3
      - queue: topic12
        key: key12-2
        value: value12-2
        headers:
          hdr12-2: val12-2
      - queue: topic12
        tag: async-tag12-4
        key: key12-4
        value: value12-4
        headers:
          hdr12-4: val12-4
  - name: consumer-for-multiproducer
    consume:
      capture: 6
      queue: topic12
- name: Mock for Service1
  hostname: service1.example.com
  port: 8001
  endpoints: []
- type: kafka
  address: localhost:9093
  actors:
  - produce:
      queue: topic1
      key: key1
      value: value1
      headers:
        hdr1: val1
